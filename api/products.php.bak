<?php
// Enable error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);

// CORS headers are now handled by Apache in .htaccess
// Do not set any CORS headers here to avoid duplication
header("Content-Type: application/json; charset=UTF-8");

// Handle preflight requests
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    // CORS headers are now handled by Apache in .htaccess
    // Do not set any CORS headers here to avoid duplication
    http_response_code(204);
    exit();
}

// Include database configuration
require_once __DIR__ . '/../server/config/database.php';

// Function to send JSON response
function sendResponse($success, $data = null, $error = null, $statusCode = 200) {
    http_response_code($statusCode);
    $response = [
        'success' => $success,
        'data' => $data,
        'error' => $error
    ];
    echo json_encode($response, JSON_PRETTY_PRINT);
    exit();
}

// Function to process product data from database row
function processProductRow($row) {
    // Process categories
    $categories = [];
    if (!empty($row['category_info'])) {
        $categoryItems = explode(';;', $row['category_info']);
        foreach ($categoryItems as $item) {
            if (!empty($item)) {
                list($cat_id, $name_en, $name_de) = explode('|', $item);
                $categories[] = [
                    'id' => $cat_id,
                    'name_en' => $name_en,
                    'name_de' => $name_de
                ];
            }
        }
    }
    
    // Process images
    $images = [];
    if (!empty($row['image_paths'])) {
        $imagePaths = explode(';;', $row['image_paths']);
        foreach ($imagePaths as $path) {
            if (!empty($path)) {
                $images[] = $path;
            }
        }
    }
    
    // Build product data
    return [
        'id' => $row['id'],
        'name' => $row['name'],
        'price' => (float)$row['price'],
        'description_en' => $row['description_en'] ?? $row['description'] ?? '',
        'description_de' => $row['description_de'] ?? '',
        'is_active' => $row['is_active'] === '1',
        'is_featured' => $row['is_featured'] === '1',
        'sku' => $row['sku'] ?? '',
        'stock' => (int)($row['stock'] ?? 0),
        'categories' => $categories,
        'images' => $images,
        'image' => !empty($images[0]) ? $images[0] : null
    ];
}

// Function to handle file uploads
function handleFileUploads($productId, $existingImages = []) {
    $uploadedFiles = [];
    $uploadDir = __DIR__ . "/../server/Tea Catalogue/$productId/";
    
    // Create directory if it doesn't exist
    if (!file_exists($uploadDir)) {
        mkdir($uploadDir, 0777, true);
    }
    
    // Handle file uploads
    if (!empty($_FILES['images'])) {
        $files = reArrayFiles($_FILES['images']);
        
        foreach ($files as $file) {
            if ($file['error'] === UPLOAD_ERR_OK) {
                // Validate file type
                $fileType = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
                if (!in_array($fileType, ['jpg', 'jpeg', 'png', 'webp'])) {
                    continue; // Skip invalid file types
                }
                
                // Generate unique filename
                $newFilename = uniqid() . '.' . $fileType;
                $targetPath = $uploadDir . $newFilename;
                
                if (move_uploaded_file($file['tmp_name'], $targetPath)) {
                    // Create different image sizes
                    createImageSizes($targetPath);
                    $uploadedFiles[] = $newFilename;
                }
            }
        }
    }
    
    // Handle image reordering and deletions
    $keptImages = [];
    if (!empty($_POST['image_order'])) {
        $imageOrder = json_decode($_POST['image_order'], true);
        foreach ($imageOrder as $image) {
            if (in_array($image, $existingImages)) {
                $keptImages[] = $image;
            }
        }
    }
    
    // Delete removed images
    $allImages = array_merge($existingImages, $uploadedFiles);
    foreach ($allImages as $image) {
        if (!in_array($image, $keptImages) && file_exists($uploadDir . $image)) {
            unlink($uploadDir . $image);
            // Also delete resized versions
            $baseName = pathinfo($image, PATHINFO_FILENAME);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            $sizes = ['_thumb', '_medium', '_large'];
            foreach ($sizes as $size) {
                $resizedFile = $uploadDir . $baseName . $size . '.' . $ext;
                if (file_exists($resizedFile)) {
                    unlink($resizedFile);
                }
            }
        }
    }
    
    return $keptImages;
}

// Function to create different image sizes
function createImageSizes($sourcePath) {
    $sizes = [
        'thumb' => [200, 200],
        'medium' => [500, 500],
        'large' => [1000, 1000]
    ];
    
    $pathInfo = pathinfo($sourcePath);
    $image = null;
    
    // Create image from source
    switch (strtolower($pathInfo['extension'])) {
        case 'jpg':
        case 'jpeg':
            $image = imagecreatefromjpeg($sourcePath);
            break;
        case 'png':
            $image = imagecreatefrompng($sourcePath);
            break;
        case 'webp':
            $image = imagecreatefromwebp($sourcePath);
            break;
        default:
            return false;
    }
    
    if (!$image) return false;
    
    $originalWidth = imagesx($image);
    $originalHeight = imagesy($image);
    
    foreach ($sizes as $size => $dimensions) {
        list($width, $height) = $dimensions;
        
        // Calculate aspect ratio
        $ratio = min($width / $originalWidth, $height / $originalHeight);
        $newWidth = (int)($originalWidth * $ratio);
        $newHeight = (int)($originalHeight * $ratio);
        
        // Create new image
        $newImage = imagecreatetruecolor($newWidth, $newHeight);
        
        // Preserve transparency for PNG
        if ($pathInfo['extension'] === 'png') {
            imagealphablending($newImage, false);
            imagesavealpha($newImage, true);
            $transparent = imagecolorallocatealpha($newImage, 0, 0, 0, 127);
            imagefill($newImage, 0, 0, $transparent);
        }
        
        // Resize
        imagecopyresampled($newImage, $image, 0, 0, 0, 0, $newWidth, $newHeight, $originalWidth, $originalHeight);
        
        // Save resized image
        $newFilename = $pathInfo['dirname'] . '/' . $pathInfo['filename'] . '_' . $size . '.' . $pathInfo['extension'];
        
        switch (strtolower($pathInfo['extension'])) {
            case 'jpg':
            case 'jpeg':
                imagejpeg($newImage, $newFilename, 90);
                break;
            case 'png':
                imagepng($newImage, $newFilename, 9);
                break;
            case 'webp':
                imagewebp($newImage, $newFilename, 90);
                break;
        }
        
        imagedestroy($newImage);
    }
    
    imagedestroy($image);
    return true;
}

// Helper function to reorganize $_FILES array
function reArrayFiles($file_post) {
    $file_ary = [];
    $file_count = count($file_post['name']);
    $file_keys = array_keys($file_post);
    
    for ($i = 0; $i < $file_count; $i++) {
        foreach ($file_keys as $key) {
            $file_ary[$i][$key] = $file_post[$key][$i];
        }
    }
    
    return $file_ary;
}

// Handle GET request
if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    // Get product ID if provided
    $productId = isset($_GET['id']) ? trim($_GET['id']) : null;
    $category = isset($_GET['category']) ? trim($_GET['category']) : null;
    $featured = isset($_GET['featured']) ? filter_var($_GET['featured'], FILTER_VALIDATE_BOOLEAN) : false;
    $limit = isset($_GET['limit']) ? (int)$_GET['limit'] : 10;
    
    // Handle pagination with page/offset
    $page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
    $page = max(1, $page); // Ensure page is at least 1
    $offset = ($page - 1) * $limit; // Calculate offset based on page number
    
    try {
        if ($productId) {
            // Get single product by ID with all related data
            $query = "SELECT 
                        p.*,
                        GROUP_CONCAT(DISTINCT CONCAT_WS('|', c.id, c.name_en, c.name_de) SEPARATOR ';;') as category_info,
                        GROUP_CONCAT(DISTINCT pi.image_path ORDER BY pi.is_primary DESC SEPARATOR ';;') as image_paths
                      FROM products p
                      LEFT JOIN product_categories pc ON p.id = pc.product_id
                      LEFT JOIN categories c ON pc.category_id = c.id
                      LEFT JOIN product_images pi ON p.id = pi.product_id
                      WHERE p.id = ? AND p.is_active = 1
                      GROUP BY p.id";
            
            $stmt = mysqli_prepare($db, $query);
            mysqli_stmt_bind_param($stmt, 's', $productId);
            mysqli_stmt_execute($stmt);
            $result = mysqli_stmt_get_result($stmt);
            
            if (mysqli_num_rows($result) === 0) {
                sendResponse(false, null, 'Product not found', 404);
            }
            
            $row = mysqli_fetch_assoc($result);
            $product = processProductRow($row);
            sendResponse(true, $product);
            
        } else {
            // Get list of products with pagination and filtering
            $baseQuery = "FROM products p
                         LEFT JOIN product_categories pc ON p.id = pc.product_id
                         LEFT JOIN categories c ON pc.category_id = c.id
                         LEFT JOIN product_images pi ON p.id = pi.product_id
                         WHERE p.is_active = '1'";
            
            // Debug log for query construction
            error_log("Base query: " . $baseQuery);
            
            $params = [];
            $types = '';
            
            // Add category filter if provided
            if ($category) {
                $baseQuery .= " AND (p.category = ? OR c.name_en = ? OR c.name_de = ?)";
                $params[] = $category;
                $params[] = $category;
                $params[] = $category;
                $types .= 'sss';
            }
            
            // Add featured filter if provided
            if ($featured) {
                $baseQuery .= " AND p.is_featured = '1'";
            }
            
            // Get total count for pagination
            $countQuery = "SELECT COUNT(DISTINCT p.id) as total $baseQuery";
            $countStmt = mysqli_prepare($db, $countQuery);
            
            if (!empty($params)) {
                mysqli_stmt_bind_param($countStmt, $types, ...$params);
            }
            
            mysqli_stmt_execute($countStmt);
            $countResult = mysqli_stmt_get_result($countStmt);
            $total = (int)mysqli_fetch_assoc($countResult)['total'];
            
            // Get products with pagination and related data
            $query = "SELECT 
                        p.*,
                        GROUP_CONCAT(DISTINCT CONCAT_WS('|', c.id, c.name_en, c.name_de) SEPARATOR ';;') as category_info,
                        GROUP_CONCAT(DISTINCT pi.image_path ORDER BY pi.is_primary DESC SEPARATOR ';;') as image_paths
                      $baseQuery
                      GROUP BY p.id
                      ORDER BY p.name ASC
                      LIMIT ? OFFSET ?";
            
            $stmt = mysqli_prepare($db, $query);
            
            // Debug log for pagination
            error_log("Pagination - Page: $page, Limit: $limit, Offset: $offset, Total: $total");
            
            // Add pagination parameters
            $limitParam = (int)$limit;
            $offsetParam = (int)$offset;
            
            if (!empty($params)) {
                // If we have category filter, bind those params first
                $types .= 'ii';
                $params[] = $limitParam;
                $params[] = $offsetParam;
                mysqli_stmt_bind_param($stmt, $types, ...$params);
            } else {
                // Just bind pagination params
                mysqli_stmt_bind_param($stmt, 'ii', $limitParam, $offsetParam);
            }
            
            mysqli_stmt_execute($stmt);
            $result = mysqli_stmt_get_result($stmt);
            
            $products = [];
            while ($row = mysqli_fetch_assoc($result)) {
                $products[] = processProductRow($row);
            }
            
            // Debug log for products count
            error_log("Found " . count($products) . " products after processing");
            
            // Calculate pagination info
            $totalPages = ceil($total / $limit);
            $currentPage = floor($offset / $limit) + 1;
            
            // Prepare response with pagination info
            $response = [
                'data' => $products,
                'pagination' => [
                    'total' => $total,
                    'limit' => $limit,
                    'offset' => $offset,
                    'page' => $currentPage,
                    'pages' => $totalPages,
                    'hasNextPage' => $currentPage < $totalPages,
                    'hasPreviousPage' => $currentPage > 1
                ]
            ];
            
            // Log the response for debugging
            error_log("API Response - Page: $currentPage, Total Pages: $totalPages, Products: " . count($products));
            
            sendResponse(true, $response);
        }
        
    } catch (Exception $e) {
        error_log("Products API Error: " . $e->getMessage());
        sendResponse(false, null, 'Internal server error', 500);
    }
} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Handle both create and update operations
    try {
        // Get request data
        $data = json_decode(file_get_contents('php://input'), true);
        
        // Check if this is an update (has ID) or create (no ID)
        $isUpdate = !empty($data['id']);
        $productId = $isUpdate ? $data['id'] : null;
        
        // For updates, get existing product data
        $existingImages = [];
        if ($isUpdate) {
            $query = "SELECT * FROM products WHERE id = ?";
            $stmt = mysqli_prepare($db, $query);
            mysqli_stmt_bind_param($stmt, 's', $productId);
            mysqli_stmt_execute($stmt);
            $result = mysqli_stmt_get_result($stmt);
            
            if (mysqli_num_rows($result) === 0) {
                sendResponse(false, null, 'Product not found', 404);
            }
            
            $product = mysqli_fetch_assoc($result);
            $existingImages = !empty($product['images']) ? explode(';;', $product['images']) : [];
        }
        
        // Handle file uploads and get updated image list
        $updatedImages = $isUpdate ? handleFileUploads($productId, $existingImages) : handleFileUploads(0, []);
        
        // Save image references to product_images table
        if (!empty($updatedImages) && $isUpdate) {
            // First, delete existing image references for this product
            mysqli_query($db, "DELETE FROM product_images WHERE product_id = " . (int)$productId);
            
            // Then insert the new image references
            $imageOrder = 0;
            $imageStmt = mysqli_prepare($db, "INSERT INTO product_images (product_id, image_path, sort_order) VALUES (?, ?, ?)");
            foreach ($updatedImages as $imagePath) {
                mysqli_stmt_bind_param($imageStmt, 'isi', $productId, $imagePath, $imageOrder);
                mysqli_stmt_execute($imageStmt);
                $imageOrder++;
            }
        }
        
        // Validate required fields
        $errors = [];
        if (empty($data['name'])) {
            $errors['name'] = 'Product name is required';
        }
        if (!isset($data['price']) || !is_numeric($data['price'])) {
            $errors['price'] = 'Valid price is required';
        }
        
        // Debug: Log the categories data
        error_log('Categories data: ' . print_r($data['categories'], true));
        
        // Check if categories exists and is not empty
        if (!isset($data['categories'])) {
            $errors['categories'] = 'Categories field is missing';
        } elseif (empty($data['categories'])) {
            $errors['categories'] = 'At least one category is required';
        } elseif (!is_array($data['categories'])) {
            $errors['categories'] = 'Categories must be an array';
        }
        
        if (!empty($errors)) {
            sendResponse(false, ['errors' => $errors], 'Validation failed', 422);
        }
        
        // Start transaction
        mysqli_begin_transaction($db);
        
        try {
            if ($isUpdate) {
                // Save version history for updates (if table exists)
                try {
                    $versionQuery = "INSERT INTO product_versions (product_id, version_data, created_at) VALUES (?, ?, NOW())";
                    $versionStmt = mysqli_prepare($db, $versionQuery);
                    if ($versionStmt) {
                        $versionData = json_encode($product);
                        mysqli_stmt_bind_param($versionStmt, 'ss', $productId, $versionData);
                        @mysqli_stmt_execute($versionStmt); // Suppress any errors
                    }
                } catch (Exception $e) {
                    // Log but don't fail the operation if version history fails
                    error_log("Failed to save version history: " . $e->getMessage());
                }
                
                // Update existing product
                $query = "UPDATE products SET 
                         name = ?, 
                         german_name = ?, 
                         price = ?, 
                         description = ?, 
                         category = ?, 
                         category_en = ?,
                         category_id = ?,
                         updated_at = NOW()
                         WHERE id = ?";
            } else {
                // Insert new product
                $query = "INSERT INTO products (
                         name, german_name, price, description, 
                         category, category_en, category_id, 
                         created_at, updated_at
                         ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())";
            }
            
            // Get category data (assuming first category is primary)
            $categoryName = !empty($data['categories'][0]['name_de']) ? $data['categories'][0]['name_de'] : '';
            $categoryNameEn = !empty($data['categories'][0]['name_en']) ? $data['categories'][0]['name_en'] : '';
            $categoryId = !empty($data['categories'][0]['id']) ? $data['categories'][0]['id'] : null;
            
            // Prepare statement
            $stmt = mysqli_prepare($db, $query);
            
            if ($isUpdate) {
                // Bind parameters for update
                $params = [
                    $data['name'],
                    $data['german_name'] ?? '',
                    $data['price'],
                    $data['description'] ?? '',
                    $categoryName,
                    $categoryNameEn,
                    $categoryId,
                    $productId  // For WHERE clause
                ];
                $types = 'ssdsssss';
                
                // Bind parameters
                mysqli_stmt_bind_param($stmt, $types, ...$params);
                
                // Log the data being updated
                error_log('Updating product with data: ' . print_r([
                    'name' => $data['name'],
                    'german_name' => $data['german_name'] ?? '',
                    'price' => $data['price'],
                    'description' => $data['description'] ?? '',
                    'category' => $categoryName,
                    'category_en' => $categoryNameEn,
                    'category_id' => $categoryId,
                    'images' => $updatedImages ? implode(';;', $updatedImages) : null,
                    'productId' => $productId
                ], true));
                
                // Execute update
                $result = mysqli_stmt_execute($stmt);
                
                if (!$result) {
                    $error = mysqli_error($db);
                    error_log('SQL Error: ' . $error);
                    error_log('SQL Query: ' . $query);
                    throw new Exception('Failed to update product: ' . $error);
                }
            } else {
                // Bind parameters for insert
                $params = [
                    $data['name'],
                    $data['german_name'] ?? '',
                    $data['price'],
                    $data['description'] ?? '',
                    $categoryName,
                    $categoryNameEn,
                    $categoryId
                ];
                $types = 'ssdssss';
                
                // Bind parameters
                mysqli_stmt_bind_param($stmt, $types, ...$params);
                
                // Execute insert
                $result = mysqli_stmt_execute($stmt);
                
                if (!$result) {
                    throw new Exception('Failed to create product: ' . mysqli_error($db));
                }
                
                // Get the new product ID
                $productId = mysqli_insert_id($db);
            }
            
            // Update product categories
            if ($isUpdate) {
                mysqli_query($db, "DELETE FROM product_categories WHERE product_id = '$productId'");
            }
            
            if (!empty($data['categories']) && is_array($data['categories'])) {
                $categoryStmt = mysqli_prepare($db, "INSERT INTO product_categories (product_id, category_id) VALUES (?, ?)");
                foreach ($data['categories'] as $category) {
                    $categoryId = is_array($category) ? ($category['id'] ?? null) : $category;
                    if ($categoryId) {
                        mysqli_stmt_bind_param($categoryStmt, 'ss', $productId, $categoryId);
                        mysqli_stmt_execute($categoryStmt);
                    }
                }
            }
            
            // Commit transaction
            mysqli_commit($db);
            
            // Get updated product data
            $query = "SELECT * FROM products WHERE id = ?";
            $stmt = mysqli_prepare($db, $query);
            mysqli_stmt_bind_param($stmt, 's', $productId);
            mysqli_stmt_execute($stmt);
            $result = mysqli_stmt_get_result($stmt);
            $updatedProduct = mysqli_fetch_assoc($result);
            
            sendResponse(true, processProductRow($updatedProduct), 'Product updated successfully');
            
        } catch (Exception $e) {
            mysqli_rollback($db);
            throw $e;
        }
        
    } catch (Exception $e) {
        error_log("Update Product Error: " . $e->getMessage() . "\n" . $e->getTraceAsString());
        sendResponse(false, ['error' => $e->getMessage(), 'trace' => $e->getTraceAsString()], 'Failed to update product: ' . $e->getMessage(), 500);
    }
} else {
    // Handle unsupported methods
    header('Allow: GET, POST, OPTIONS');
    sendResponse(false, null, 'Method Not Allowed', 405);
}

// Close connection
mysqli_close($db);
?>
