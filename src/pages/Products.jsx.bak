import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import { getProducts } from '../data/products';
import ProductsCarousel from '../components/Products';
import { useCart } from '../context/CartContext';
import AddToCartNotification from '../components/AddToCartNotification';
import { FiChevronLeft, FiChevronRight, FiFilter, FiX } from 'react-icons/fi';

// Helper function to format category names for display
const formatCategoryName = (category) => {
  // Handle undefined or null category
  if (!category) return 'Uncategorized';
  
  // Convert to string in case it's not
  let formatted = String(category);
  
  // Remove 'tea-bag-mixbox-' prefix if present
  formatted = formatted.replace(/^tea-bag-mixbox-/, '');
  
  // Replace hyphens with spaces
  formatted = formatted.replace(/-/g, ' ').trim();
  
  // If empty after processing
  if (!formatted) return 'Uncategorized';
  
  // Capitalize first letter of each word
  return formatted.split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
};

// Helper function to get the main category from the category string
const getMainCategory = (category) => {
  // If category is falsy, return null to indicate no category
  if (!category) return null;
  
  // Normalize the category by converting to string, lowercase and trimming
  const normalized = String(category).trim();
  
  // If category is empty after normalization, return null
  if (!normalized) return null;
  
  // Map of category patterns to their display names
  const categoryMap = {
    'tea bag mixbox': 'Tea Bag Mixbox',
    'green tea': 'Green Tea',
    'black tea$': 'Black Tea',  // $ ensures exact match for 'black tea' but not 'black tea blend'
    'black tea blend': 'Black Tea Blend',
    'rooibos tea': 'Rooibos Tea',
    'fruit tea blend': 'Fruit Tea Blend',
    'half fermented tea - china': 'Half Fermented Tea - China',
    'herb tea blend': 'Herb Tea Blend',
    'herb tea': 'Herb Tea',
  };
  
  const lowerNormalized = normalized.toLowerCase();
  
  // Try exact matches first (case insensitive)
  for (const [pattern, displayName] of Object.entries(categoryMap)) {
    if (lowerNormalized === pattern.toLowerCase()) {
      return displayName;
    }
  }
  
  // Try partial matches as fallback
  for (const [pattern, displayName] of Object.entries(categoryMap)) {
    if (lowerNormalized.includes(pattern.toLowerCase())) {
      return displayName;
    }
  }
  
  // If we have a category but it's not in our map, return it as-is
  return normalized;
};

const ProductCard = ({ product, onAddToCart, isClicked, formatCategoryName }) => {
  const [currentImage, setCurrentImage] = useState('');
  const [isImageLoaded, setIsImageLoaded] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);
  const descriptionRef = useRef(null);
  const [isTruncated, setIsTruncated] = useState(false);
  const imageRef = useRef(null);

  // Set initial image
  useEffect(() => {
    console.log('Product image sources:', {
      id: product._id,
      name: product.name,
      image_1: product.image_1,
      image_2: product.image_2,
      images: product.images
    });
    
    const loadPrimaryImage = () => {
      if (!product.image_1) {
        console.log('No primary image available, trying fallback');
        tryFallbackImage();
        return;
      }
      
      console.log(`Attempting to load primary image: ${product.image_1}`);
      const img = new Image();
      img.onload = () => {
        console.log(`✅ Successfully loaded primary image: ${product.image_1}`);
        setCurrentImage(product.image_1);
        setIsImageLoaded(true);
      };
      img.onerror = (e) => {
        console.warn(`❌ Error loading primary image (${product.image_1}):`, e);
        console.log('Trying fallback image...');
        tryFallbackImage();
      };
      img.src = product.image_1;
    };
    
    const tryFallbackImage = () => {
      // Try secondary image first
      if (product.image_2 && product.image_2 !== product.image_1) {
        console.log(`Attempting to load secondary image: ${product.image_2}`);
        const fallbackImg = new Image();
        fallbackImg.onload = () => {
          console.log(`✅ Successfully loaded fallback image: ${product.image_2}`);
          setCurrentImage(product.image_2);
          setIsImageLoaded(true);
        };
        fallbackImg.onerror = (e) => {
          console.warn(`❌ Error loading fallback image (${product.image_2}):`, e);
          tryProductImages();
        };
        fallbackImg.src = product.image_2;
      } else {
        tryProductImages();
      }
    };
    
    const tryProductImages = () => {
      // Try to use the first available image from product.images
      if (product.images && product.images.length > 0) {
        const firstImage = product.images[0];
        const imageUrl = firstImage.url || firstImage;
        console.log(`Attempting to load image from product.images: ${imageUrl}`);
        
        const img = new Image();
        img.onload = () => {
          console.log(`✅ Successfully loaded image from product.images: ${imageUrl}`);
          setCurrentImage(imageUrl);
          setIsImageLoaded(true);
        };
        img.onerror = (e) => {
          console.warn(`❌ Error loading image from product.images (${imageUrl}):`, e);
          showPlaceholder();
        };
        img.src = imageUrl;
      } else {
        showPlaceholder();
      }
    };
    
    const showPlaceholder = () => {
      console.log('No valid images found, showing placeholder');
      setCurrentImage('');
      setIsImageLoaded(true); // Show placeholder
    };
    
    // Start loading the primary image
    loadPrimaryImage();
  }, [product.image_1, product.image_2, product.image_2]);

  // Check if text is truncated
  useEffect(() => {
    if (descriptionRef.current) {
      const isTextTruncated = descriptionRef.current.scrollHeight > descriptionRef.current.clientHeight || 
                             descriptionRef.current.scrollWidth > descriptionRef.current.clientWidth;
      setIsTruncated(isTextTruncated);
    }
  }, [product.description]);

  const handleMouseEnter = () => {
    if (product.image_2 && currentImage !== product.image_2) {
      const img = new Image();
      img.src = product.image_2;
      img.onload = () => {
        setCurrentImage(product.image_2);
      };
    }
  };

  const handleMouseLeave = () => {
    if (product.image_1 && currentImage !== product.image_1) {
      setCurrentImage(product.image_1);
    }
  };

  return (
    <div 
      className="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 mx-2 my-4 h-full flex flex-col"
    >
      <div 
        className="aspect-square mb-6 rounded-lg overflow-hidden bg-gray-50 flex items-center justify-center"
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        {!isImageLoaded ? (
          <div className="w-full h-full flex items-center justify-center">
            <div className="w-12 h-12 border-4 border-gray-200 border-t-indigo-500 rounded-full animate-spin"></div>
          </div>
        ) : currentImage ? (
          <img 
            ref={imageRef}
            src={currentImage} 
            alt={product.name}
            className="w-full h-full object-cover transition-opacity duration-300"
            onLoad={() => {
              console.log('Image loaded successfully');
              setIsImageLoaded(true);
            }}
            onError={(e) => {
              console.warn('Error loading image:', e);
              setCurrentImage('');
              setIsImageLoaded(true);
            }}
          />
        ) : (
          <div className="w-full h-full flex flex-col items-center justify-center p-4 text-center text-gray-400">
            <svg 
              className="w-16 h-16 mb-2 text-gray-300" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24" 
              xmlns="http://www.w3.org/2000/svg"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth="1" 
                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
              ></path>
            </svg>
            <span className="text-sm font-medium">No image available</span>
          </div>
        )}
      </div>
      <div className="flex-grow px-1">
        <div className="text-sm text-gray-500 mb-1">
          {formatCategoryName(product.category)}
        </div>
        <h3 className="text-xl font-medium mb-1 line-clamp-2 min-h-[3rem]">
          {product.name}
        </h3>
        <div className="relative">
          <p 
            ref={descriptionRef}
            className="text-gray-600 text-sm mb-3 line-clamp-2 min-h-[2.5rem] relative group"
            onMouseEnter={() => isTruncated && setShowTooltip(true)}
            onMouseLeave={() => setShowTooltip(false)}
            aria-label={product.description}
          >
            {product.description}
            {isTruncated && (
              <span className="absolute bottom-0 right-0 bg-white pl-1 text-gray-400">...</span>
            )}
          </p>
          {isTruncated && showTooltip && (
            <div 
              className="absolute z-10 w-64 p-3 mt-1 text-sm text-gray-700 bg-white border border-gray-200 rounded-lg shadow-lg"
              role="tooltip"
            >
              {product.description}
              <div className="absolute -top-1.5 left-4 w-3 h-3 bg-white border-t border-l border-gray-200 transform rotate-45"></div>
            </div>
          )}
        </div>
      </div>
      <div className="mt-auto">
        <div className="flex justify-between items-center">
          <span className="text-lg font-medium text-gray-900">
            ${parseFloat(product.price).toFixed(2)}
          </span>
          <button 
            onClick={() => onAddToCart(product)}
            className={`
              bg-gray-900 text-white px-4 py-2 rounded-md
              transition-all duration-200 ease-in-out
              hover:bg-gray-800
              ${isClicked ? 'scale-90' : 'scale-100'}
            `}
          >
            Add to Cart
          </button>
        </div>
      </div>
    </div>
  );
};

const Products = () => {
  const { addToCart } = useCart();
  const [notification, setNotification] = useState({ show: false, productName: '' });
  const [clickedId, setClickedId] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  
  // Process and filter products
  const { filteredProducts, categories, productsByCategory, totalPages, currentItems } = useMemo(() => {
    console.log('Processing products...');
    
    // Initialize default values
    const defaultReturn = { 
      filteredProducts: [], 
      categories: [], 
      productsByCategory: {}, 
      totalPages: 0, 
      currentItems: [] 
    };
    
    if (!products || !products.length) {
      console.log('No products to process');
      return defaultReturn;
    }
    
    console.log(`Processing ${products.length} products`);
    
    // Process all products
    const allCategories = new Set();
    
    // First, filter out inactive products
    const activeProducts = products.filter(product => product.isActive !== false);
    
    // Then map and process the remaining products
    const processedProducts = activeProducts.map((product) => {
      try {
        const category = getMainCategory(product.category || '');
        allCategories.add(category);
        
        // Helper function to process image URLs
        const processImageUrl = (url) => {
          try {
            if (!url) return '';
            
            // Convert to string and trim
            let imgUrl = String(url).trim();
            
            // If it's already a full URL or data URL, return it as is
            if (imgUrl.startsWith('http') || imgUrl.startsWith('data:')) {
              return imgUrl;
            }
            
            // Handle relative paths starting with ./ or /assets/
            if (imgUrl.startsWith('./assets/')) {
              return imgUrl.substring(1); // Remove leading . to make it /assets/
            }
            
            // Handle root-relative paths starting with /assets/
            if (imgUrl.startsWith('/assets/')) {
              return imgUrl;
            }
            
            // For any other case, assume it's a relative path
            return `/${imgUrl}`;
            
          } catch (error) {
            console.error('Error processing image URL:', error, 'URL:', url);
            return '';
          }
        };

        // Helper function to get image path
        const getImagePath = (imageName) => {
          try {
            if (!imageName) return '/images/placeholder-product.jpg';
            
            const imageStr = String(imageName).trim();
            if (!imageStr) return '/images/placeholder-product.jpg';
            
            // If it's already a full URL or data URL, return as is
            if (imageStr.startsWith('http') || imageStr.startsWith('data:')) {
              return imageStr;
            }
            
            // Handle absolute paths
            if (imageStr.startsWith('/')) {
              return imageStr;
            }
            
            // Handle relative paths
            return `/${imageStr}`;
            
          } catch (error) {
            console.error('Error in getImagePath:', error);
            return '/images/placeholder-product.jpg';
          }
        };

        // Process product images
        const primaryImage = getImagePath(product.image_1 || product.image);
        const secondaryImage = getImagePath(product.image_2);
        
        return {
          ...product,
          id: product.id || product._id,
          name: product.name || product.product_name || 'Unnamed Product',
          price: parseFloat(product.price) || 0,
          displayPrice: `R${parseFloat(product.price || 0).toFixed(2)}`,
          image: primaryImage,
          image_1: primaryImage,
          image_2: secondaryImage,
          category: product.category_name || product.category || 'Uncategorized',
          category_name: product.category_name || product.category,
          category_slug: product.category_slug || String(product.category_name || product.category || '').toLowerCase().replace(/\s+/g, '-'),
          searchText: `${product.name || ''} ${product.product_name || ''} ${product.description || ''} ${product.category_name || ''} ${product.category || ''}`.toLowerCase()
        };
      } catch (error) {
        console.error('Error processing product:', error, 'Product data:', product);
        return null;
      }
    }).filter(Boolean); // Remove any null entries from failed processing
    
    console.log(`Processed ${processedProducts.length} products`);
    
    // Apply filters
    let result = [...processedProducts];
    
    // Filter by search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase().trim();
      if (query) {
        result = result.filter(product => 
          product.searchText.includes(query)
        );
      }
    }
    
    // Filter by category
    if (selectedCategory && selectedCategory !== 'All') {
      result = result.filter(product => product.category === selectedCategory);
    }
    
    console.log(`After filtering: ${result.length} products`);
    
    // Pagination
    const totalPages = Math.max(1, Math.ceil(result.length / itemsPerPage));
    const indexOfLastItem = currentPage * itemsPerPage;
    const indexOfFirstItem = (currentPage - 1) * itemsPerPage;
    const currentItems = result.slice(indexOfFirstItem, indexOfLastItem);
    
    // Group by category for display
    const productsByCategory = {};
    currentItems.forEach(product => {
      if (product.category) {
        if (!productsByCategory[product.category]) {
          productsByCategory[product.category] = [];
        }
        productsByCategory[product.category].push(product);
      }
    });
    
    return {
      filteredProducts: result,
      categories: Array.from(new Set(processedProducts.map(p => p.category).filter(Boolean))).sort(),
      productsByCategory,
      totalPages,
      currentItems
    };
  }, [products, selectedCategory, searchQuery, currentPage, itemsPerPage]);
  
  // Change page
  const paginate = (pageNumber) => setCurrentPage(pageNumber);
  
  // Reset to first page when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [selectedCategory, searchQuery]);
  
  // Get sorted categories for the filter dropdown
  const sortedCategories = useMemo(() => {
    if (!products || !products.length) return [];
    
    const categories = new Set();
    products.forEach(product => {
      const category = product.category_name || product.category;
      if (category) {
        categories.add(category);
      }
    });
    
    return Array.from(categories).filter(Boolean).sort();
  }, [products]);
  
  // Ensure productsByCategory is always an object
  const safeProductsByCategory = useMemo(() => {
    return productsByCategory || {};
  }, [productsByCategory]);
  
  // Function to render products by category
  const renderProductsByCategory = () => {
    if (!sortedCategories || !sortedCategories.length) return null;
    
    return sortedCategories.map((category) => {
      const categoryProducts = safeProductsByCategory[category] || [];
      if (categoryProducts.length === 0) return null;
      
      return (
        <section key={category} className="mb-16">
          {/* Category Header */}
          <div className="text-center mb-8">
            <h2 className="text-2xl font-medium text-gray-900 inline-block relative pb-2">
              {category}
              <span className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-16 h-0.5 bg-gray-900"></span>
            </h2>
          </div>
          
          {/* Products Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
            {categoryProducts.map((product) => (
              <ProductCard 
                key={product._id}
                product={product}
                onAddToCart={handleAddToCart}
                isClicked={clickedId === product._id}
                formatCategoryName={formatCategoryName}
              />
            ))}
          </div>
        </section>
      );
    });
  };
  
  // Load products from static data
  useEffect(() => {
    const loadProducts = async () => {
      try {
        setLoading(true);
        setError('');
        console.log('Loading products from static data...');
        
        const response = await getProducts();
        const productsData = response.products || [];
        
        if (!Array.isArray(productsData)) {
          throw new Error('Failed to load products data: Invalid format');
        }
        
        console.log(`Successfully loaded ${productsData.length} products`);
        setProducts(productsData);
      } catch (error) {
        console.error('Error loading products:', error);
        setError(error.message || 'Failed to load products. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    
    loadProducts();
  }, []);
  
  const handleAddToCart = (product) => {
    addToCart({
      ...product,
      // Ensure price is a number for the cart
      price: parseFloat(product.price) || 0
    });
    
    setClickedId(product.id);
    setNotification({ show: true, productName: product.name });
    
    // Hide notification after 3 seconds
    setTimeout(() => {
      setNotification(prev => ({ ...prev, show: false }));
    }, 3000);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-red-500 text-center p-4">
          <p className="text-xl">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      {/* Featured Products Carousel */}
      <div className="bg-gray-50">
        <ProductsCarousel />
      </div>

      <div className="py-12 px-4">
        <div className="max-w-7xl mx-auto">
          {/* Page Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl font-light text-gray-900 mb-4">Our Tea Collection</h1>
            <p className="text-lg text-gray-600">Discover our premium selection of teas</p>
          </div>
          
          {/* Filters and Search */}
          <div className="mb-8 bg-white p-4 rounded-lg shadow-sm">
            <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
              {/* Mobile filter button */}
              <button 
                onClick={() => setShowMobileFilters(!showMobileFilters)}
                className="md:hidden flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-md text-gray-700"
              >
                <FiFilter />
                {showMobileFilters ? 'Hide Filters' : 'Show Filters'}
              </button>
              
              {/* Search */}
              <div className="flex-1 max-w-md">
                <input
                  type="text"
                  placeholder="Search products..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                />
              </div>
              
              {/* Category Filter - Desktop */}
              <div className="hidden md:block">
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                >
                  {['All', ...sortedCategories].map(category => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            
            {/* Mobile Category Filter */}
            {showMobileFilters && (
              <div className="mt-4 md:hidden">
                <label className="block text-sm font-medium text-gray-700 mb-2">Filter by Category</label>
                <div className="grid grid-cols-2 gap-2">
                  {['All', ...sortedCategories].map(category => (
                    <button
                      key={category}
                      onClick={() => setSelectedCategory(category)}
                      className={`px-3 py-2 text-sm rounded-md text-center ${
                        selectedCategory === category 
                          ? 'bg-amber-600 text-white' 
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {category}
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>
          
          {/* Results Count */}
          <div className="mb-6">
            <p className="text-gray-600">
              Showing <span className="font-medium">{filteredProducts.length}</span> products
              {selectedCategory !== 'All' && ` in ${selectedCategory}`}
              {searchQuery && ` matching "${searchQuery}"`}
            </p>
          </div>
          
                    {/* Page Numbers */}
                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                      let pageNum;
                      if (totalPages <= 5) {
                        pageNum = i + 1;
                    )}

                    {/* Page Numbers */}
                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                      let pageNum;
                      if (totalPages <= 5) {
                        pageNum = i + 1;
                      } else if (currentPage <= 3) {
                        pageNum = i + 1;
                      } else if (currentPage >= totalPages - 2) {
                        pageNum = totalPages - 4 + i;
                      } else {
                        pageNum = currentPage - 2 + i;
                      }
                      
                      if (pageNum < 1 || pageNum > totalPages) return null;
                      
                      return (
                        <button
                          key={pageNum}
                          onClick={() => paginate(pageNum)}
                          className={`w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200 ${
                            currentPage === pageNum
                              ? 'bg-gray-900 text-white transform scale-105 shadow-md'
                              : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                          }`}
                          aria-current={currentPage === pageNum ? 'page' : undefined}
                        >
                          {pageNum}
                        </button>
                      );
                    })}

                    {/* Last Page */}
                    {currentPage < totalPages - 2 && totalPages > 5 && (
                      <>
                        {currentPage < totalPages - 3 && (
                          <span className="px-1 text-gray-400">...</span>
                        )}
                        <button
                          onClick={() => paginate(totalPages)}
                          className={`w-10 h-10 rounded-full flex items-center justify-center transition-colors duration-200 ${
                            currentPage === totalPages
                              ? 'bg-gray-900 text-white shadow-md'
                              : 'text-gray-700 hover:bg-gray-100'
                          }`}
                        >
                          {totalPages}
                        </button>
                      </>
                    )}

                    {/* Next Button */}
                    <button
                      onClick={() => paginate(Math.min(totalPages, currentPage + 1))}
                      disabled={currentPage === totalPages}
                      className={`px-4 py-2 rounded-md flex items-center transition-all duration-200 ${
                        currentPage === totalPages
                          ? 'text-gray-400 cursor-not-allowed'
                          : 'text-gray-900 hover:bg-gray-100'
                      }`}
                      aria-label="Next page"
                    >
                      <span className="mr-1 hidden sm:inline">Next</span>
                      <FiChevronRight className="w-5 h-5" />
                    </button>
                  </div>
                  <div className="mt-4 text-center text-sm text-gray-600">
                    Page {currentPage} of {totalPages}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="text-center py-12 bg-white rounded-lg shadow-sm">
              <h3 className="text-lg font-medium text-gray-900 mb-2">No products found</h3>
              <p className="text-gray-500">
                Try adjusting your search or filter criteria
              </p>
              <button
                onClick={() => {
                  setSearchQuery('');
                  setSelectedCategory('All');
                }}
                className="mt-4 text-amber-600 hover:text-amber-700 font-medium"
              >
                Clear all filters
              </button>
            </div>
          )}
        </div>
      </div>
      
      <AddToCartNotification 
        show={notification.show} 
        productName={notification.productName} 
      />
    </div>
  );
};

export default Products;